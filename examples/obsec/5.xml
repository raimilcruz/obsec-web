<?xml version="1.0" encoding="utf-8"?>
<Example>
  <Title>3: Recursive declassification over list</Title>
  <Description>
    Recursive declassification policies are desirable to express interesting declassification of
    either inductive data structures or object interfaces (whose essence are recursive types). Consider for instance a secret list
     of strings, for which we want to allow traversal of the
    structure and comparison of its elements with a given string.
    Note that the head method returns a String that only has the == operation public.
     Any method invocation over the head of the list (different than ==) renders the program ill-typed.
    For instance, changing the inner if condition to myList.head().hash().==(“a”.hash()): the type checker reports “Both branches of an if expression must have the same type”. This is because the else branch of the outer if has type Bool@H while the then branch has type Bool@L.
  </Description>
</Example>
